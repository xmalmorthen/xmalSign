throwErr=(r=>new Error(r)),arrayBufferToString=(r=>new Promise((e,t)=>{const o=new Uint8Array(r),n=o.length;let i="";for(let r=0;r<n;r+=65535){let e=65535;r+65535>n&&(e=n-r),i+=String.fromCharCode.apply(null,o.subarray(r,r+e))}i?e(i):t(throwErr("Bufer invÃ¡lido"))})),rawStringToBuffer=(r=>new Promise((e,t)=>{try{const o=r.length;let n=new Array(o);for(let e=0;e<o;++e)n[e]=255&r.charCodeAt(e);e(new Uint8Array(n).buffer)}catch(r){t(r)}})),stringToArrayBufferView=(r=>new Promise((e,t)=>{try{let o=new Uint8Array(r.length);for(let e=0;e<r.length;e++)o[e]=r.charCodeAt(e);e(o)}catch(r){t(r)}})),str2ab=(r=>new Promise((e,t)=>{try{const o=new ArrayBuffer(r.length);let n=new Uint8Array(o);for(let e=0,t=r.length;e<t;e++)n[e]=r.charCodeAt(e);e(o)}catch(r){t(r)}})),binStringToHex=(r=>new Promise((e,t)=>{try{let o,n="";for(let e=0,t=r.length;e<t;++e)n=n+((o=r.charCodeAt(e))>>4).toString(16)+(15&o).toString(16);e(n)}catch(r){t(r)}})),forgePbkdf2=((r,e,t,o)=>new Promise(function(n,i){const a=forge.util.hexToBytes(e);try{const e=forge.pkcs5.pbkdf2(r,a,t,o/8,"sha1");n(forge.util.bytesToHex(e))}catch(r){i(r)}})),makeOddParity=((r,e)=>new Promise((t,o)=>{try{for(let t=0,o=0;o<e;o++){for(let e=0;e<8;e++)c=1,c<<=e,0!=(r[o]&c)&&t++;t%2==0&&(r[o]=1^r[o])}t(forge.util.binary.hex.encode(r))}catch(r){o(r)}})),decipher3DES=((r,e,t)=>new Promise((o,n)=>{try{o(CryptoJS.TripleDES.decrypt({ciphertext:r},e,{iv:t,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7}))}catch(r){n(r)}})),openPKCS8PKey=((r,e)=>new Promise(async(t,o)=>{try{const n=await rawStringToBuffer(r),i=org.pkijs.fromBER(n);if(-1===i.offset)throw new Error(ERR_DECODE_PKEY);const a=new org.pkijs.simpl.pkcs8.CRYPPKEY({schema:i.result}),s=a.encryptionAlgorithm.parameters.encryptionScheme.algorithm_id;if(s!=TRIPLE_DES_OOID)throw new Error(`${ERR_ALGORITHM} [ ${s} ]`);const l=a.encryptionAlgorithm.parameters.EncAlgWPBKDF2params.keyDevParams.iterationCount,c=await binStringToHex(await arrayBufferToString(a.encryptionAlgorithm.parameters.EncAlgWPBKDF2params.keyDevParams.salt.value_block.value_hex)),g=CryptoJS.enc.Hex.parse(await binStringToHex(await arrayBufferToString(a.encryptedData.value_block.value_hex,!1,!0)));let h=forge.util.createBuffer(e),p=await forgePbkdf2(h,c,l,192);p=await makeOddParity(forge.util.binary.hex.decode(p),24);let f=CryptoJS.enc.Hex.parse(p);const w=CryptoJS.enc.Hex.parse(await binStringToHex(await arrayBufferToString(a.encryptionAlgorithm.parameters.encryptionScheme.algorithm_params.value_block.value_hex,!1,!0)));let m=await decipher3DES(g,f,w),E=m.toString(CryptoJS.enc.Latin1);if(E.length<=0)throw new Error(ERR_DECRYPT_PKEY);if("0"!=E[0]){if(h=forge.util.createBuffer(forge.util.encodeUtf8(e)),p=await forgePbkdf2(h,c,l,192),p=await makeOddParity(forge.util.binary.hex.decode(p),24),f=CryptoJS.enc.Hex.parse(p),(E=(m=decipher3DES(g,f,w)).toString(CryptoJS.enc.Latin1)).length<=0)throw new Error(ERR_DECRYPT_PKEY);if("0"!=E[0])throw new Error(ERR_DECRYPT_PKEY);t(E)}else t(E)}catch(r){o(r)}})),encodePKCS7=((r,e,t,o)=>new Promise(async(n,i)=>{try{if(hashAlgDOid=ALGOID[t],!hashAlgDOid)throw new Error(ERR_ALGORITHM);if(!(e instanceof ArrayBuffer)||null==e||0==e.length)throw new Error(ERR_NULL_SIGNATURE);if("string"!=typeof r||null==r||0==r.length)throw new Error(ERR_NULL_CERTIFICATE);const a=await str2ab(r),s=org.pkijs.fromBER(a),l=new org.pkijs.simpl.CERT({schema:s.result}),c=new org.pkijs.simpl.cms.EncapsulatedContentInfo({eContentType:DATA_CONTENT_TYPE_OOID});null!=o&&(c.eContent=new org.pkijs.asn1.OCTETSTRING({value_hex:o}));const g=new org.pkijs.simpl.CMS_SIGNED_DATA({version:1,digestAlgorithms:[new org.pkijs.simpl.ALGORITHM_IDENTIFIER({algorithm_id:hashAlgDOid,algorithm_params:new org.pkijs.asn1.NULL})],encapContentInfo:c,signerInfos:[new org.pkijs.simpl.CMS_SIGNER_INFO({version:1,sid:new org.pkijs.simpl.cms.IssuerAndSerialNumber({issuer:l.issuer,serialNumber:l.serialNumber}),digestAlgorithm:new org.pkijs.simpl.ALGORITHM_IDENTIFIER({algorithm_id:hashAlgDOid,algorithm_params:new org.pkijs.asn1.NULL}),signatureAlgorithm:new org.pkijs.simpl.ALGORITHM_IDENTIFIER({algorithm_id:RSA_ENCRYPTION_OOID}),signature:new org.pkijs.asn1.OCTETSTRING({value_hex:e})})],certificates:[l]});n(new org.pkijs.simpl.CMS_CONTENT_INFO({contentType:CMS_SIGNED_DATA_OOID,content:g.toSchema(!0)}).toSchema(!0).toBER(!1))}catch(r){i(r)}}));